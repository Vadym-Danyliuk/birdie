"use client";
import { DiaryEntry, ApiEmotion, DiaryFormValues } from "@/types/diary";
import { useState, useEffect, useRef } from "react";
import { Formik, Form, Field, ErrorMessage, FormikHelpers } from "formik";
import * as Yup from "yup";
import axiosInstance from "@/lib/axios";
import toast from "react-hot-toast";
import styles from "./AddDiaryEntryForm.module.css";
import Button from "@/components/Button/Button";

interface AddDiaryEntryFormProps {
  entry?: DiaryEntry;
  onSuccess: () => void;
  onCancel: () => void;
}

const validationSchema = Yup.object({
  title: Yup.string()
    .min(2, "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 2 —Å–∏–º–≤–æ–ª–∏")
    .max(100, "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –º–æ–∂–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 100 —Å–∏–º–≤–æ–ª—ñ–≤")
    .required("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º –ø–æ–ª–µ–º"),
  description: Yup.string()
    .min(10, "–ó–∞–ø–∏—Å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 10 —Å–∏–º–≤–æ–ª—ñ–≤")
    .max(1000, "–ó–∞–ø–∏—Å –Ω–µ –º–æ–∂–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 1000 —Å–∏–º–≤–æ–ª—ñ–≤")
    .required("–û–ø–∏—Å —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º –ø–æ–ª–µ–º"),
  emotions: Yup.array()
    .of(Yup.string())
    .min(1, "–û–±–µ—Ä—ñ—Ç—å –ø—Ä–∏–Ω–∞–π–º–Ω—ñ –æ–¥–Ω—É –µ–º–æ—Ü—ñ—é")
    .required("–ï–º–æ—Ü—ñ—ó —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º –ø–æ–ª–µ–º"),
});

export const AddDiaryEntryForm: React.FC<AddDiaryEntryFormProps> = ({
  entry,
  onSuccess,
  onCancel,
}) => {
  const [emotions, setEmotions] = useState<ApiEmotion[]>([]);
  const [emotionsLoading, setEmotionsLoading] = useState(true);
  const [emotionsError, setEmotionsError] = useState<string | null>(null);
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);

  const initialValues: DiaryFormValues = {
    title: entry?.title || "",
    description: entry?.description || "",
    emotions: entry?.emotions || [],
  };

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        dropdownRef.current &&
        !dropdownRef.current.contains(event.target as Node)
      ) {
        setIsDropdownOpen(false);
      }
    };

    if (isDropdownOpen) {
      document.addEventListener("mousedown", handleClickOutside);
    }

    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [isDropdownOpen]);

  useEffect(() => {
    const fetchEmotions = async () => {
      try {
        setEmotionsLoading(true);
        setEmotionsError(null);

        console.log("üîÑ –ó–∞–ø–∏—Ç –¥–æ API");
        const response = await axiosInstance.get("/emotions?page=1&limit=10");

        console.log("üì¶ –ü–æ–≤–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:", response);
        console.log("üìä response.data:", response.data);

        let emotionsData: ApiEmotion[] = [];

        if (Array.isArray(response.data)) {
          emotionsData = response.data;
        } else if (response.data.data && Array.isArray(response.data.data)) {
          emotionsData = response.data.data;
        } else if (
          response.data.emotions &&
          Array.isArray(response.data.emotions)
        ) {
          emotionsData = response.data.emotions;
        } else if (
          response.data.results &&
          Array.isArray(response.data.results)
        ) {
          emotionsData = response.data.results;
        }

        console.log("‚úÖ –û–±—Ä–æ–±–ª–µ–Ω—ñ –µ–º–æ—Ü—ñ—ó:", emotionsData);

        const validEmotions = emotionsData.filter(
          (emotion): emotion is ApiEmotion => {
            return (
              emotion &&
              typeof emotion._id === "string" &&
              emotion._id.length > 0 &&
              (typeof emotion.name === "string" ||
                typeof emotion.title === "string")
            );
          }
        );

        if (validEmotions.length === 0) {
          throw new Error("–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –µ–º–æ—Ü—ñ–π");
        }

        setEmotions(validEmotions);
      } catch (error: any) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –µ–º–æ—Ü—ñ–π:", error);
        setEmotionsError(error.message || "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –µ–º–æ—Ü—ñ–π");

        const fallbackEmotions: ApiEmotion[] = [
          { _id: "1", name: "–ù–∞—Ç—Ö–Ω–µ–Ω–Ω—è" },
          { _id: "2", name: "–í–¥—è—á–Ω—ñ—Å—Ç—å" },
          { _id: "3", name: "–¢—Ä–∏–≤–æ–≥–∞" },
          { _id: "4", name: "–î–∏–≤–Ω—ñ –±–∞–∂–∞–Ω–Ω—è" },
          { _id: "5", name: "–ù—É–¥–æ—Ç–∞" },
        ];

        setEmotions(fallbackEmotions);
      } finally {
        setEmotionsLoading(false);
      }
    };

    fetchEmotions();
  }, []);

  const handleSubmit = async (
    values: DiaryFormValues,
    { setSubmitting }: FormikHelpers<DiaryFormValues>
  ) => {
    try {
      console.log("üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º–∏:", values);

      const url = entry ? `/diary/${entry._id}` : "/diary";
      const method = entry ? "put" : "post";

      const response = await axiosInstance[method](url, values);

      console.log("‚úÖ –£—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:", response.data);

      toast.success(
        entry ? "–ó–∞–ø–∏—Å —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!" : "–ó–∞–ø–∏—Å —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!"
      );

      onSuccess();
    } catch (error: any) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:", error);

      const errorMessage =
        error.response?.data?.message ||
        error.message ||
        "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–∞–ø–∏—Å—É";

      toast.error(errorMessage);
    } finally {
      setSubmitting(false);
    }
  };

  const retryLoadEmotions = async () => {
    setEmotionsError(null);
    setEmotionsLoading(true);

    try {
      const response = await axiosInstance.get("/emotions?page=1&limit=10");
      let emotionsData: ApiEmotion[] = [];

      if (Array.isArray(response.data)) {
        emotionsData = response.data;
      } else if (response.data.data && Array.isArray(response.data.data)) {
        emotionsData = response.data.data;
      } else if (
        response.data.emotions &&
        Array.isArray(response.data.emotions)
      ) {
        emotionsData = response.data.emotions;
      } else if (
        response.data.results &&
        Array.isArray(response.data.results)
      ) {
        emotionsData = response.data.results;
      }

      const validEmotions = emotionsData.filter(
        (emotion): emotion is ApiEmotion => {
          return (
            emotion &&
            typeof emotion._id === "string" &&
            emotion._id.length > 0 &&
            (typeof emotion.name === "string" ||
              typeof emotion.title === "string")
          );
        }
      );

      setEmotions(validEmotions);
    } catch (error) {
      setEmotionsError("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è");

      const fallbackEmotions: ApiEmotion[] = [
        { _id: "1", name: "–ù–∞—Ç—Ö–Ω–µ–Ω–Ω—è" },
        { _id: "2", name: "–í–¥—è—á–Ω—ñ—Å—Ç—å" },
        { _id: "3", name: "–¢—Ä–∏–≤–æ–≥–∞" },
        { _id: "4", name: "–î–∏–≤–Ω—ñ –±–∞–∂–∞–Ω–Ω—è" },
        { _id: "5", name: "–ù—É–¥–æ—Ç–∞" },
      ];

      setEmotions(fallbackEmotions);
    } finally {
      setEmotionsLoading(false);
    }
  };

  const getSelectedEmotionsDisplay = (selectedIds: string[]) => {
    if (selectedIds.length === 0)
      return { text: "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é", tags: [] };

    const selectedEmotions = selectedIds
      .map((id) => {
        const emotion = emotions.find((e) => e._id === id);
        return emotion
          ? { id, name: emotion.name || emotion.title || "–ë–µ–∑ –Ω–∞–∑–≤–∏" }
          : null;
      })
      .filter(Boolean) as { id: string; name: string }[];

    return {
      text: selectedEmotions.map((e) => e.name).join(", "),
      tags: selectedEmotions,
    };
  };

  return (
    <div className={styles.container}>
      <Formik
        initialValues={initialValues}
        validationSchema={validationSchema}
        onSubmit={handleSubmit}
        enableReinitialize
      >
        {({ isSubmitting, values, setFieldValue }) => (
          <Form className={styles.form}>
            <div className={styles.fieldGroup}>
              <label htmlFor="title" className={styles.label}>
                –ó–∞–≥–æ–ª–æ–≤–æ–∫
              </label>
              <Field
                id="title"
                name="title"
                type="text"
                className={styles.input}
                placeholder="–í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–ø–∏—Å—É"
              />
              <ErrorMessage
                name="title"
                component="div"
                className={styles.errorMessage}
              />
            </div>

            <div className={styles.fieldGroup}>
              <label className={styles.label}>–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó</label>

              {emotionsLoading ? (
                <div className={styles.loadingContainer}>
                  <div className={styles.spinner}></div>
                  <span>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –µ–º–æ—Ü—ñ–π...</span>
                </div>
              ) : emotionsError ? (
                <div className={styles.errorContainer}>
                  <div className={styles.errorMessage}>
                    –ü–æ–º–∏–ª–∫–∞: {emotionsError}
                  </div>
                  <button
                    type="button"
                    onClick={retryLoadEmotions}
                    className={styles.retryButton}
                  >
                    –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É
                  </button>
                </div>
              ) : emotions.length === 0 ? (
                <div className={styles.noDataContainer}>
                  <span>üî≠ –ï–º–æ—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</span>
                  <button
                    type="button"
                    onClick={retryLoadEmotions}
                    className={styles.retryButton}
                  >
                    –û–Ω–æ–≤–∏—Ç–∏
                  </button>
                </div>
              ) : (
                <div className={styles.customSelect} ref={dropdownRef}>
                  <div
                    className={`${styles.selectTrigger} ${isDropdownOpen ? styles.selectTriggerOpen : ""}`}
                    onClick={() => setIsDropdownOpen(!isDropdownOpen)}
                  >
                    <div className={styles.selectContent}>
                      {values.emotions.length === 0 ? (
                        <span className={styles.selectPlaceholder}>
                          –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
                        </span>
                      ) : (
                        <div className={styles.selectedTags}>
                          {getSelectedEmotionsDisplay(values.emotions).tags.map(
                            (tag) => (
                              <span key={tag.id} className={styles.selectedTag}>
                                {tag.name}
                              </span>
                            )
                          )}
                        </div>
                      )}
                    </div>
                    <span
                      className={`${styles.selectArrow} ${isDropdownOpen ? styles.selectArrowOpen : ""}`}
                    >
                      <svg
                        width="12"
                        height="8"
                        viewBox="0 0 12 8"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M5.99989 5.20762L1.67164 0.87937C1.50164 0.70937 1.30273 0.62854 1.07489 0.63687C0.847061 0.64521 0.648145 0.73437 0.478145 0.90437C0.308145 1.07437 0.223145 1.27746 0.223145 1.51362C0.223145 1.74979 0.308145 1.95287 0.478145 2.12287L5.39715 7.04187C5.56715 7.21187 5.76806 7.29687 5.99989 7.29687C6.23173 7.29687 6.43264 7.21187 6.60264 7.04187L11.5466 2.09787C11.7166 1.92787 11.8016 1.72896 11.8016 1.50112C11.8016 1.27329 11.7166 1.07437 11.5466 0.90437C11.3766 0.73437 11.1736 0.64937 10.9374 0.64937C10.7012 0.64937 10.4981 0.73437 10.3281 0.90437L5.99989 5.20762Z"
                          fill="black"
                          fillOpacity="0.6"
                        />
                      </svg>
                    </span>
                  </div>

                  {isDropdownOpen && (
                    <div className={styles.selectDropdown}>
                      <div className={styles.selectDropdownInner}>
                        {emotions.map((emotion) => {
                          const isSelected = values.emotions.includes(
                            emotion._id
                          );
                          return (
                            <button
                              key={emotion._id}
                              type="button"
                              className={`${styles.selectOption} ${isSelected ? styles.selectOptionSelected : ""}`}
                              onClick={() => {
                                const newEmotions = isSelected
                                  ? values.emotions.filter(
                                      (id) => id !== emotion._id
                                    )
                                  : [...values.emotions, emotion._id];
                                setFieldValue("emotions", newEmotions);
                              }}
                            >
                              <div className={styles.checkbox}>
                                {isSelected && (
                                  <svg
                                    width="12"
                                    height="10"
                                    viewBox="0 0 12 10"
                                    fill="none"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <path
                                      d="M1 5L4.5 8.5L11 1"
                                      stroke="white"
                                      strokeWidth="2"
                                      strokeLinecap="round"
                                      strokeLinejoin="round"
                                    />
                                  </svg>
                                )}
                              </div>
                              <span>
                                {emotion.name || emotion.title || "–ë–µ–∑ –Ω–∞–∑–≤–∏"}
                              </span>
                            </button>
                          );
                        })}
                      </div>
                    </div>
                  )}
                </div>
              )}

              <ErrorMessage
                name="emotions"
                component="div"
                className={styles.errorMessage}
              />
            </div>

            <div className={styles.fieldGroup}>
              <label htmlFor="description" className={styles.label}>
                –ó–∞–ø–∏—Å
              </label>
              <Field
                id="description"
                name="description"
                as="textarea"
                className={styles.textarea}
                placeholder="–ó–∞–ø–∏—à—ñ—Ç—å, —è–∫ –≤–∏ —Å–µ–±–µ –≤—ñ–¥—á—É–≤–∞—î—Ç–µ"
                rows={5}
              />
              <ErrorMessage
                name="description"
                component="div"
                className={styles.errorMessage}
              />
            </div>

            <div className={styles.buttonGroup}>
              <Button
                type="submit"
                variant="primary"
                disabled={emotionsLoading}
                loading={isSubmitting}
              >
                {isSubmitting ? "–ó–±–µ—Ä—ñ–≥–∞—î–º–æ..." : "–ó–±–µ—Ä–µ–≥—Ç–∏"}
              </Button>
            </div>
          </Form>
        )}
      </Formik>
    </div>
  );
};
